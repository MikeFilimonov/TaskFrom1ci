<?xml version="1.0" encoding="UTF-8"?>
<DataCompositionSchema xmlns="http://v8.1c.ru/8.1/data-composition-system/schema" xmlns:dcscom="http://v8.1c.ru/8.1/data-composition-system/common" xmlns:dcscor="http://v8.1c.ru/8.1/data-composition-system/core" xmlns:dcsset="http://v8.1c.ru/8.1/data-composition-system/settings" xmlns:v8="http://v8.1c.ru/8.1/data/core" xmlns:v8ui="http://v8.1c.ru/8.1/data/ui" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<dataSource>
		<name>DataSource1</name>
		<dataSourceType>Local</dataSourceType>
	</dataSource>
	<dataSet xsi:type="DataSetQuery">
		<name>LineNeedsInventory</name>
		<field xsi:type="DataSetFieldField">
			<dataPath>Deficit</dataPath>
			<field>Deficit</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>ClosingBalance</dataPath>
			<field>ClosingBalance</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>MaxInventory</dataPath>
			<field>MaxInventory</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>MinInventory</dataPath>
			<field>MinInventory</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Products</dataPath>
			<field>Products</field>
			<role>
				<dcscom:required>true</dcscom:required>
			</role>
			<inputParameters>
				<dcscor:item>
					<dcscor:parameter>ChoiceParameters</dcscor:parameter>
					<dcscor:value xsi:type="dcscor:ChoiceParameters">
						<dcscor:item>
							<dcscor:choiceParameter>Filter.ProductsType</dcscor:choiceParameter>
							<dcscor:value xsi:type="dcscor:DesignTimeValue">Enum.ProductsTypes.InventoryItem</dcscor:value>
						</dcscor:item>
					</dcscor:value>
				</dcscor:item>
			</inputParameters>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Company</dataPath>
			<field>Company</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
			<attributeUseRestriction>
				<condition>true</condition>
			</attributeUseRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Batch</dataPath>
			<field>Batch</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
			<attributeUseRestriction>
				<condition>true</condition>
			</attributeUseRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Period</dataPath>
			<field>Period</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
			<role>
				<dcscom:required>true</dcscom:required>
			</role>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Receipt</dataPath>
			<field>Receipt</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>ReceiptOverdue</dataPath>
			<field>ReceiptOverdue</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Demand</dataPath>
			<field>Demand</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>NeedOverdue</dataPath>
			<field>NeedOverdue</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Overdue</dataPath>
			<field>Overdue</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>AvailableBalance</dataPath>
			<field>AvailableBalance</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Characteristic</dataPath>
			<field>Characteristic</field>
			<role>
				<dcscom:required>true</dcscom:required>
			</role>
			<inputParameters>
				<dcscor:item>
					<dcscor:parameter>ChoiceParameterLinks</dcscor:parameter>
					<dcscor:value xsi:type="dcscor:ChoiceParameterLinks">
						<dcscor:item>
							<dcscor:choiceParameter>Products</dcscor:choiceParameter>
							<dcscor:value>Products</dcscor:value>
							<dcscor:mode xmlns:d8p1="http://v8.1c.ru/8.1/data/enterprise" xsi:type="d8p1:LinkedValueChangeMode">Clear</dcscor:mode>
						</dcscor:item>
					</dcscor:value>
				</dcscor:item>
			</inputParameters>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>SalesOrder</dataPath>
			<field>SalesOrder</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
			<attributeUseRestriction>
				<condition>true</condition>
			</attributeUseRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>GLAccount</dataPath>
			<field>GLAccount</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
			<attributeUseRestriction>
				<condition>true</condition>
			</attributeUseRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>ProductionOrder</dataPath>
			<field>ProductionOrder</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
			<attributeUseRestriction>
				<condition>true</condition>
			</attributeUseRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>PurchaseOrder</dataPath>
			<field>PurchaseOrder</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
			<attributeUseRestriction>
				<condition>true</condition>
			</attributeUseRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>MovementType</dataPath>
			<field>MovementType</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
			<attributeUseRestriction>
				<condition>true</condition>
			</attributeUseRestriction>
			<role>
				<dcscom:required>true</dcscom:required>
			</role>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Order</dataPath>
			<field>Order</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
			<attributeUseRestriction>
				<condition>true</condition>
			</attributeUseRestriction>
			<role>
				<dcscom:required>true</dcscom:required>
			</role>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>OrderBalance</dataPath>
			<field>OrderBalance</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Vendor</dataPath>
			<field>Vendor</field>
			<useRestriction>
				<condition>true</condition>
			</useRestriction>
			<attributeUseRestriction>
				<condition>true</condition>
			</attributeUseRestriction>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>Warehouse</dataPath>
			<field>Warehouse</field>
			<valueType>
				<v8:Type xmlns:d5p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d5p1:CatalogRef.BusinessUnits</v8:Type>
			</valueType>
		</field>
		<field xsi:type="DataSetFieldField">
			<dataPath>SupplierPriceTypes</dataPath>
			<field>SupplierPriceTypes</field>
		</field>
		<dataSource>DataSource1</dataSource>
		<query>SELECT
	OrdersBalance.MovementType AS MovementType,
	OrdersBalance.Company AS Company,
	OrdersBalance.Products AS Products,
	CASE
		WHEN OrdersBalance.ReplenishmentMethod = VALUE(Enum.InventoryReplenishmentMethods.Production)
			THEN VALUE(Catalog.Counterparties.EmptyRef)
		ELSE OrdersBalance.Vendor
	END AS Vendor,
	OrdersBalance.Characteristic AS Characteristic,
	OrdersBalance.Order AS Order,
	SUM(OrdersBalance.QuantityBalance) AS QuantityBalance
	INTO TemporaryTableOrdersBalance
	FROM
	(SELECT
		VALUE(Enum.InventoryMovementTypes.Shipment) AS MovementType,
		SalesOrdersBalances.Company AS Company,
		SalesOrdersBalances.Products AS Products,
		SalesOrdersBalances.Products.ReplenishmentMethod AS ReplenishmentMethod,
		SalesOrdersBalances.Products.Vendor AS Vendor,
		CASE
			WHEN &amp;UseCharacteristics
				THEN SalesOrdersBalances.Characteristic
			ELSE VALUE(Catalog.ProductsCharacteristics.EmptyRef)
		END AS Characteristic,
		SalesOrdersBalances.SalesOrder AS Order,
		SalesOrdersBalances.QuantityBalance AS QuantityBalance
	FROM
		AccumulationRegister.SalesOrders.Balance(
				&amp;DateBalance,
				Company = &amp;Company
					AND Products.ProductsType = VALUE(Enum.ProductsTypes.InventoryItem)
					AND Products.ReplenishmentMethod IN (&amp;ReplenishmentMethod) {(Products).* AS Products, (Characteristic).* AS Characteristic}) AS SalesOrdersBalances
	
	UNION ALL
	
	SELECT
		InventoryDemandBalances.MovementType,
		InventoryDemandBalances.Company,
		InventoryDemandBalances.Products,
		InventoryDemandBalances.Products.ReplenishmentMethod,
		InventoryDemandBalances.Products.Vendor,
		CASE
			WHEN &amp;UseCharacteristics
				THEN InventoryDemandBalances.Characteristic
			ELSE VALUE(Catalog.ProductsCharacteristics.EmptyRef)
		END,
		InventoryDemandBalances.SalesOrder,
		InventoryDemandBalances.QuantityBalance
	FROM
		AccumulationRegister.InventoryDemand.Balance(
				&amp;EndDate,
				Company = &amp;Company
					AND Products.ProductsType = VALUE(Enum.ProductsTypes.InventoryItem)
					AND Products.ReplenishmentMethod IN (&amp;ReplenishmentMethod) {(Products).* AS Products, (Characteristic).* AS Characteristic}) AS InventoryDemandBalances
	
	UNION ALL
	
	SELECT
		VALUE(Enum.InventoryMovementTypes.Receipt),
		PurchaseOrdersBalances.Company,
		PurchaseOrdersBalances.Products,
		PurchaseOrdersBalances.Products.ReplenishmentMethod,
		PurchaseOrdersBalances.Products.Vendor,
		CASE
			WHEN &amp;UseCharacteristics
				THEN PurchaseOrdersBalances.Characteristic
			ELSE VALUE(Catalog.ProductsCharacteristics.EmptyRef)
		END,
		PurchaseOrdersBalances.PurchaseOrder,
		PurchaseOrdersBalances.QuantityBalance
	FROM
		AccumulationRegister.PurchaseOrders.Balance(
				&amp;DateBalance,
				Company = &amp;Company
					AND Products.ProductsType = VALUE(Enum.ProductsTypes.InventoryItem)
					AND Products.ReplenishmentMethod IN (&amp;ReplenishmentMethod) {(Products).* AS Products, (Characteristic).* AS Characteristic}) AS PurchaseOrdersBalances
	
	UNION ALL
	
	SELECT
		VALUE(Enum.InventoryMovementTypes.Receipt),
		ProductionOrdersBalances.Company,
		ProductionOrdersBalances.Products,
		ProductionOrdersBalances.Products.ReplenishmentMethod,
		ProductionOrdersBalances.Products.Vendor,
		CASE
			WHEN &amp;UseCharacteristics
				THEN ProductionOrdersBalances.Characteristic
			ELSE VALUE(Catalog.ProductsCharacteristics.EmptyRef)
		END,
		ProductionOrdersBalances.ProductionOrder,
		ProductionOrdersBalances.QuantityBalance
	FROM
		AccumulationRegister.ProductionOrders.Balance(
				&amp;DateBalance,
				Company = &amp;Company
					AND Products.ProductsType = VALUE(Enum.ProductsTypes.InventoryItem)
					AND Products.ReplenishmentMethod IN (&amp;ReplenishmentMethod) {(Products).* AS Products, (Characteristic).* AS Characteristic}) AS ProductionOrdersBalances) AS OrdersBalance

	GROUP BY
	OrdersBalance.Company,
	OrdersBalance.Products,
	CASE
		WHEN OrdersBalance.ReplenishmentMethod = VALUE(Enum.InventoryReplenishmentMethods.Production)
			THEN VALUE(Catalog.Counterparties.EmptyRef)
		ELSE OrdersBalance.Vendor
	END,
	OrdersBalance.Characteristic,
	OrdersBalance.Order,
	OrdersBalance.MovementType

	INDEX BY
	Company,
	Products,
	Characteristic,
	Order
;

///////////////////////////////////////////////////////////////////////////////
	SELECT
	LineNeedsInventory.Period AS Period,
	LineNeedsInventory.Products AS Products,
	LineNeedsInventory.Vendor AS Vendor,
	LineNeedsInventory.Characteristic AS Characteristic,
	LineNeedsInventory.Order AS Order,
	LineNeedsInventory.MovementType AS MovementType,
	SUM(LineNeedsInventory.OrderBalance) AS OrderBalance,
	SUM(LineNeedsInventory.MinInventory) AS MinInventory,
	SUM(LineNeedsInventory.MaxInventory) AS MaxInventory,
	SUM(LineNeedsInventory.AvailableBalance) AS AvailableBalance,
	SUM(LineNeedsInventory.Receipt) AS Receipt,
	SUM(LineNeedsInventory.ReceiptOverdue) AS ReceiptOverdue,
	SUM(LineNeedsInventory.Demand) AS Demand,
	SUM(LineNeedsInventory.NeedOverdue) AS NeedOverdue,
	SUM(LineNeedsInventory.ClosingBalance) AS ClosingBalance,
	SUM(LineNeedsInventory.Overdue) AS Overdue,
	SUM(LineNeedsInventory.Deficit) AS Deficit
	INTO TemporaryTableInventoryNeedsSchedule
	FROM
	(SELECT
		&amp;StartDate AS Period,
		InventoryBalances.Products AS Products,
		CASE
			WHEN InventoryBalances.Products.ReplenishmentMethod = VALUE(Enum.InventoryReplenishmentMethods.Production)
				THEN VALUE(Catalog.Counterparties.EmptyRef)
			ELSE InventoryBalances.Products.Vendor
		END AS Vendor,
		CASE
			WHEN &amp;UseCharacteristics
				THEN InventoryBalances.Characteristic
			ELSE VALUE(Catalog.ProductsCharacteristics.EmptyRef)
		END AS Characteristic,
		UNDEFINED AS Order,
		UNDEFINED AS MovementType,
		0 AS OrderBalance,
		InventoryBalances.QuantityBalance AS AvailableBalance,
		0 AS Receipt,
		0 AS ReceiptOverdue,
		0 AS Demand,
		0 AS NeedOverdue,
		0 AS MinInventory,
		0 AS MaxInventory,
		0 AS ClosingBalance,
		0 AS Overdue,
		0 AS Deficit
	FROM
		AccumulationRegister.Inventory.Balance(&amp;DateBalance, Company = &amp;Company {(Products).* AS Products, (Characteristic).* AS Characteristic, (StructuralUnit).* AS Warehouse}) AS InventoryBalances
	
	UNION ALL
	
	SELECT
		&amp;StartDate,
		ReorderPointSettings.Products,
		CASE
			WHEN ReorderPointSettings.Products.ReplenishmentMethod = VALUE(Enum.InventoryReplenishmentMethods.Production)
				THEN VALUE(Catalog.Counterparties.EmptyRef)
			ELSE ReorderPointSettings.Products.Vendor
		END,
		CASE
			WHEN &amp;UseCharacteristics
				THEN ReorderPointSettings.Characteristic
			ELSE VALUE(Catalog.ProductsCharacteristics.EmptyRef)
		END,
		UNDEFINED,
		UNDEFINED,
		0,
		0,
		0,
		0,
		0,
		0,
		ReorderPointSettings.InventoryMinimumLevel,
		ReorderPointSettings.InventoryMaximumLevel,
		0,
		0,
		0
	FROM
		InformationRegister.ReorderPointSettings AS ReorderPointSettings
	WHERE
		ReorderPointSettings.Company = &amp;Company
	{WHERE
		ReorderPointSettings.Products.* AS Products,
		ReorderPointSettings.Characteristic.* AS Characteristic}
	
	UNION ALL
	
	SELECT
		CASE
			WHEN InventoryFlowCalendar.Period &lt; &amp;StartDate
					OR InventoryFlowCalendar.Period &gt; &amp;EndDate
					OR InventoryFlowCalendar.Period IS NULL 
				THEN &amp;StartDate
			ELSE InventoryFlowCalendar.Period
		END,
		OrdersBalance.Products,
		OrdersBalance.Vendor,
		CASE
			WHEN &amp;UseCharacteristics
				THEN OrdersBalance.Characteristic
			ELSE VALUE(Catalog.ProductsCharacteristics.EmptyRef)
		END,
		OrdersBalance.Order,
		OrdersBalance.MovementType,
		CASE
			WHEN InventoryFlowCalendar.Period &gt; &amp;EndDate
				THEN -InventoryFlowCalendar.Quantity
			ELSE OrdersBalance.QuantityBalance
		END,
		0,
		SUM(CASE
				WHEN InventoryFlowCalendar.MovementType = VALUE(Enum.InventoryMovementTypes.Receipt)
						AND InventoryFlowCalendar.Period &lt;= &amp;EndDate
						AND InventoryFlowCalendar.Period &gt;= &amp;StartDate
					THEN InventoryFlowCalendar.Quantity
				ELSE 0
			END),
		0,
		SUM(CASE
				WHEN InventoryFlowCalendar.MovementType = VALUE(Enum.InventoryMovementTypes.Shipment)
						AND InventoryFlowCalendar.Period &lt;= &amp;EndDate
						AND InventoryFlowCalendar.Period &gt;= &amp;StartDate
					THEN InventoryFlowCalendar.Quantity
				ELSE 0
			END),
		0,
		0,
		0,
		0,
		0,
		0
	FROM
		TemporaryTableOrdersBalance AS OrdersBalance
			LEFT JOIN AccumulationRegister.InventoryFlowCalendar AS InventoryFlowCalendar
			ON OrdersBalance.Company = InventoryFlowCalendar.Company
				AND OrdersBalance.Products = InventoryFlowCalendar.Products
				AND OrdersBalance.Characteristic = InventoryFlowCalendar.Characteristic
				AND OrdersBalance.Order = InventoryFlowCalendar.Order
				AND OrdersBalance.MovementType = InventoryFlowCalendar.MovementType
	{WHERE
		InventoryFlowCalendar.Products.* AS Products,
		InventoryFlowCalendar.Characteristic.* AS Characteristic}
	
	GROUP BY
		CASE
			WHEN InventoryFlowCalendar.Period &lt; &amp;StartDate
					OR InventoryFlowCalendar.Period &gt; &amp;EndDate
					OR InventoryFlowCalendar.Period IS NULL 
				THEN &amp;StartDate
			ELSE InventoryFlowCalendar.Period
		END,
		OrdersBalance.Products,
		OrdersBalance.Vendor,
		CASE
			WHEN &amp;UseCharacteristics
				THEN OrdersBalance.Characteristic
			ELSE VALUE(Catalog.ProductsCharacteristics.EmptyRef)
		END,
		OrdersBalance.Order,
		OrdersBalance.MovementType,
		CASE
			WHEN InventoryFlowCalendar.Period &gt; &amp;EndDate
				THEN -InventoryFlowCalendar.Quantity
			ELSE OrdersBalance.QuantityBalance
		END) AS LineNeedsInventory
	WHERE
	LineNeedsInventory.Products.ReplenishmentMethod IN(&amp;ReplenishmentMethod)

	GROUP BY
	LineNeedsInventory.Period,
	LineNeedsInventory.Products,
	LineNeedsInventory.Vendor,
	LineNeedsInventory.Characteristic,
	LineNeedsInventory.Order,
	LineNeedsInventory.MovementType
;

///////////////////////////////////////////////////////////////////////////////
	SELECT DISTINCT
	TemporaryTableInventoryNeedsSchedule.Period AS Period,
	TemporaryTableInventoryNeedsSchedule.Products AS Products,
	CASE
		WHEN TemporaryTableInventoryNeedsSchedule.Vendor = VALUE(Catalog.Counterparties.EmptyRef)
			THEN CounterpartyPricesSliceLast.SupplierPriceTypes.Owner
		ELSE TemporaryTableInventoryNeedsSchedule.Vendor
	END AS Vendor,
	TemporaryTableInventoryNeedsSchedule.Characteristic AS Characteristic,
	TemporaryTableInventoryNeedsSchedule.Order AS Order,
	TemporaryTableInventoryNeedsSchedule.MovementType AS MovementType,
	TemporaryTableInventoryNeedsSchedule.OrderBalance AS OrderBalance,
	TemporaryTableInventoryNeedsSchedule.MinInventory AS MinInventory,
	TemporaryTableInventoryNeedsSchedule.MaxInventory AS MaxInventory,
	TemporaryTableInventoryNeedsSchedule.AvailableBalance AS AvailableBalance,
	TemporaryTableInventoryNeedsSchedule.Receipt AS Receipt,
	TemporaryTableInventoryNeedsSchedule.ReceiptOverdue AS ReceiptOverdue,
	TemporaryTableInventoryNeedsSchedule.Demand AS Demand,
	TemporaryTableInventoryNeedsSchedule.NeedOverdue AS NeedOverdue,
	TemporaryTableInventoryNeedsSchedule.ClosingBalance AS ClosingBalance,
	TemporaryTableInventoryNeedsSchedule.Overdue AS Overdue,
	TemporaryTableInventoryNeedsSchedule.Deficit AS Deficit
	FROM
	TemporaryTableInventoryNeedsSchedule AS TemporaryTableInventoryNeedsSchedule
		LEFT JOIN InformationRegister.CounterpartyPrices.SliceLast(&amp;StartDate, SupplierPriceTypes IN (&amp;SupplierPriceTypes)) AS CounterpartyPricesSliceLast
		ON TemporaryTableInventoryNeedsSchedule.Products = CounterpartyPricesSliceLast.Products
			AND TemporaryTableInventoryNeedsSchedule.Characteristic = CounterpartyPricesSliceLast.Characteristic
			AND (CounterpartyPricesSliceLast.Actuality)
	WHERE
	(TemporaryTableInventoryNeedsSchedule.Vendor = &amp;Counterparty
			OR CounterpartyPricesSliceLast.SupplierPriceTypes.Owner = &amp;Counterparty
			OR &amp;Counterparty = VALUE(Catalog.Counterparties.EmptyRef))

	ORDER BY
	Products,
	Characteristic,
	Period,
		Order</query>
	</dataSet>
	<parameter>
		<name>StartDate</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Period start</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type>xs:dateTime</v8:Type>
			<v8:DateQualifiers>
				<v8:DateFractions>DateTime</v8:DateFractions>
			</v8:DateQualifiers>
		</valueType>
		<value xsi:type="xs:dateTime">0001-01-01T00:00:00</value>
		<useRestriction>true</useRestriction>
		<availableAsField>false</availableAsField>
	</parameter>
	<parameter>
		<name>UseCharacteristics</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Use characteristics</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type>xs:boolean</v8:Type>
		</valueType>
		<value xsi:type="xs:boolean">false</value>
		<useRestriction>true</useRestriction>
		<availableAsField>false</availableAsField>
	</parameter>
	<parameter>
		<name>Period</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Accounting period</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type>xs:dateTime</v8:Type>
			<v8:DateQualifiers>
				<v8:DateFractions>DateTime</v8:DateFractions>
			</v8:DateQualifiers>
		</valueType>
		<value xsi:type="xs:dateTime">0001-01-01T00:00:00</value>
		<useRestriction>false</useRestriction>
		<availableAsField>false</availableAsField>
	</parameter>
	<parameter>
		<name>Company</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Company</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type xmlns:d4p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d4p1:CatalogRef.Companies</v8:Type>
		</valueType>
		<value xsi:type="dcscor:DesignTimeValue">Catalog.Companies.EmptyRef</value>
		<useRestriction>true</useRestriction>
		<availableAsField>false</availableAsField>
	</parameter>
	<parameter>
		<name>EndDate</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Period end</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type>xs:dateTime</v8:Type>
			<v8:DateQualifiers>
				<v8:DateFractions>DateTime</v8:DateFractions>
			</v8:DateQualifiers>
		</valueType>
		<value xsi:type="xs:dateTime">0001-01-01T00:00:00</value>
		<useRestriction>true</useRestriction>
		<availableAsField>false</availableAsField>
	</parameter>
	<parameter>
		<name>DateBalance</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Date balance</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type>xs:dateTime</v8:Type>
			<v8:DateQualifiers>
				<v8:DateFractions>DateTime</v8:DateFractions>
			</v8:DateQualifiers>
		</valueType>
		<value xsi:type="xs:dateTime">0001-01-01T00:00:00</value>
		<useRestriction>true</useRestriction>
		<availableAsField>false</availableAsField>
	</parameter>
	<parameter>
		<name>ReplenishmentMethod</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Replenishment method</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type xmlns:d4p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d4p1:EnumRef.InventoryReplenishmentMethods</v8:Type>
		</valueType>
		<value xsi:type="dcscor:DesignTimeValue">Enum.InventoryReplenishmentMethods.EmptyRef</value>
		<useRestriction>true</useRestriction>
	</parameter>
	<parameter>
		<name>SupplierPriceTypes</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Counterparty price kinds</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type xmlns:d4p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d4p1:CatalogRef.SupplierPriceTypes</v8:Type>
		</valueType>
		<value xsi:type="dcscor:DesignTimeValue">Catalog.SupplierPriceTypes.EmptyRef</value>
		<useRestriction>true</useRestriction>
	</parameter>
	<parameter>
		<name>Counterparty</name>
		<title xsi:type="v8:LocalStringType">
			<v8:item>
				<v8:lang>en</v8:lang>
				<v8:content>Counterparties</v8:content>
			</v8:item>
		</title>
		<valueType>
			<v8:Type xmlns:d4p1="http://v8.1c.ru/8.1/data/enterprise/current-config">d4p1:CatalogRef.Counterparties</v8:Type>
		</valueType>
		<value xsi:type="dcscor:DesignTimeValue">Catalog.Counterparties.EmptyRef</value>
		<useRestriction>true</useRestriction>
	</parameter>
	<settingsVariant>
		<dcsset:name>Default</dcsset:name>
		<dcsset:presentation xsi:type="xs:string">Default</dcsset:presentation>
		<dcsset:settings xmlns:style="http://v8.1c.ru/8.1/data/ui/style" xmlns:sys="http://v8.1c.ru/8.1/data/ui/fonts/system" xmlns:web="http://v8.1c.ru/8.1/data/ui/colors/web" xmlns:win="http://v8.1c.ru/8.1/data/ui/colors/windows">
			<dcsset:selection>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Period</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Products</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Characteristic</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Order</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>MovementType</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>OrderBalance</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>AvailableBalance</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Receipt</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>ReceiptOverdue</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Demand</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>NeedOverdue</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>MinInventory</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>MaxInventory</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>ClosingBalance</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Overdue</dcsset:field>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:SelectedItemField">
					<dcsset:field>Deficit</dcsset:field>
				</dcsset:item>
			</dcsset:selection>
			<dcsset:filter>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Products</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:right xsi:type="dcscor:DesignTimeValue">Catalog.Products.EmptyRef</dcsset:right>
					<dcsset:userSettingID>6b89f1e0-a511-4a96-8b46-558e4427a92a</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Characteristic</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:right xsi:type="dcscor:DesignTimeValue">Catalog.ProductsCharacteristics.EmptyRef</dcsset:right>
					<dcsset:userSettingID>2b0cf98e-7848-4b64-b773-ff4ca31899b8</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:item xsi:type="dcsset:FilterItemComparison">
					<dcsset:use>false</dcsset:use>
					<dcsset:left xsi:type="dcscor:Field">Warehouse</dcsset:left>
					<dcsset:comparisonType>Equal</dcsset:comparisonType>
					<dcsset:right xsi:type="dcscor:DesignTimeValue">Catalog.StructuralUnits.EmptyRef</dcsset:right>
					<dcsset:userSettingID>f5741508-93c1-4918-8f1c-b12ac42587f3</dcsset:userSettingID>
				</dcsset:item>
				<dcsset:viewMode>Normal</dcsset:viewMode>
				<dcsset:userSettingID>f08072f8-c1da-4fd8-9ebe-649ac3cb30b5</dcsset:userSettingID>
			</dcsset:filter>
			<dcsset:item xsi:type="dcsset:StructureItemGroup">
				<dcsset:order>
					<dcsset:item xsi:type="dcsset:OrderItemAuto"/>
				</dcsset:order>
				<dcsset:selection>
					<dcsset:item xsi:type="dcsset:SelectedItemAuto"/>
				</dcsset:selection>
			</dcsset:item>
			<dcsset:itemsViewMode>Normal</dcsset:itemsViewMode>
		</dcsset:settings>
	</settingsVariant>
</DataCompositionSchema>